
#__________________________________________________
# launcher/
# sdl63.ssms.example.cfg
#__________________________________________________
# author        : colonel
# last modified : 2016/11/1
#__________________________________________________
#
# Example of configuration file for a single-stage-multi-simulation
# of a standard deterministic Lorenz 63 model
#

[program]

launcher           = /Users/aFarchi/Desktop/Lorenz/python/pyLorenz/launchSimulation.py
nProcessors        = 1

[dimensions]

state              = 3
observations       = 3

[random]

initialiser_seed   = None
truth_seed         = None
filter_seed        = None

[initialisation]

truth              = [-5.91652, -5.52332, 24.5723]
variance           = 1.0

[model]

class              = Lorenz63
sigma              = 10.0
beta               = 8.0 / 3.0
rho                = 28.0

[integration]

class              = Deterministic
step               = RK4
dt                 = 0.01
variance           = [0.0]

[observation-operator]

class              = ObserveAll
variance           = [4.0]

[observation-times]

class              = Regular
dt                 = [0.1]
Nt                 = 1000

[results]

field              = analyse_rmse
Nt_burnout         = 500
operator           = mean

[output]
    
directory          = ./
modWrite           = 500
modPrint           = 100
label              = mysim

[truth]

output             =

[entkf]

enable             = True
output             = analyse_rmse

Ns                 = [9, 27]
inflation          = [1.1, 1.2, 1.3]
integration_jitter = [0.0]
integration_class  = Deterministic

[entkfn-dual]

enable             = True
output             = analyse_rmse

Ns                 = [9, 27]
inflation          = [0.0]
integration_jitter = [0.0]
integration_class  = Deterministic

minimiser_1d_class = GoldenSection
minimiser_1d_maxIt = 100
minimiser_1d_tol   = 1.0e-4

[sirpf]

enable             = True
output             = analyse_rmse

Ns                 = [81, 243]
resampling_thr     = [0.5]
integration_jitter = [0.1, 1.0]
integration_class  = BasicStochastic

resampler          = StochasticUniversal

