
#__________________________________________________
# pyLorenz/
# sdl63.example.cfg
#__________________________________________________
# author        : colonel
# last modified : 2016/11/5
#__________________________________________________
#
# Example of configuration file for a simulation
# of a standard deterministic Lorenz 63 model
#

[dimensions]

    state               = 3
    observations        = 3

[model]

    class               = Lorenz63
    sigma               = 10.0
    beta                = 8.0 / 3.0
    rho                 = 28.0

[observation-times]

    class               = Regular
    dt                  = 0.1
    Nt                  = 1000

[output]
    
    directory           = ./
    modWrite            = 500
    modPrint            = 100
    label               = simulation

[truth]

    class               = Simulated

    [files]

        buffer_size     = $observation-times.Nt$
        truth           = truth.bin
        observations    = observations.bin

    [output]

        fields          = trajectory, observations, time

    [initialisation]

        mean            = [2., 3., 4.]
        variance        = 0.0
        seed            = None

    [integration]

        class           = Deterministic
        step            = RK4
        dt              = 0.01
        variance        = 0.0
        seed            = None

    [observation-operator]

        class           = ObserveAll
        variance        = 4.0
        seed            = None

[ETKF]

    filter              = ETKF

    [output]

        fields          = analyse_rmse

    [ensemble]

        Ns              = 9
        inflation       = 1.2

    [linalg]

        rcond           = 1.0e-15

    [initialisation]

        mean            = from truth
        variance        = 1.0
        seed            = None

    [integration]

        class           = Deterministic
        step            = from truth
        dt              = from truth
        variance        = 0.0
        seed            = None

    [observation-operator]

        class           = from truth
        variance        = from truth
        seed            = None

[ETKF-N-primal]

    filter              = ETKF-N-primal

    [output]

        fields          = analyse_rmse

    [ensemble]

        Ns              = 9
        inflation       = 1.0

    [linalg]

        rcond           = 1.0e-15

    [initialisation]

        mean            = from truth
        variance        = 1.0
        seed            = None

    [integration]

        class           = Deterministic
        step            = from truth
        dt              = from truth
        variance        = 0.0
        seed            = None

    [observation-operator]

        class           = from truth
        variance        = from truth
        seed            = None

    [primal-minimisation]

        epsilon         = ( $ETKF-N-primal.ensemble.Ns$ + 1.0 ) / $ETKF-N-primal.ensemble.Ns$

        [minimiser]
            
            class       = ScipyVector
            method      = 'BFGS'
            tolerance   = None

            [options]

                maxiter = 100

[ETKF-N-dual-capped]

    filter              = ETKF-N-dual

    [output]

        fields          = analyse_rmse

    [ensemble]

        Ns              = 9
        inflation       = 1.0

    [linalg]

        rcond           = 1.0e-15

    [initialisation]

        mean            = from truth
        variance        = 1.0
        seed            = None

    [integration]

        class           = Deterministic
        step            = from truth
        dt              = from truth
        variance        = 0.0
        seed            = None

    [observation-operator]

        class           = from truth
        variance        = from truth
        seed            = None

    [dual-minimisation]

        epsilon         = $ETKF-N-dual-capped.ensemble.Ns$ / ( $ETKF-N-dual-capped.ensemble.Ns$ - 1.0 )
        maxZeta         = $ETKF-N-dual-capped.ensemble.Ns$ - 1.0

        [minimiser]
            
            class       = ScipyScalar
            method      = Bounded
            tolerance   = None

            [options]

                maxiter = 100

[SIR]

    filter              = SIR

    [output]

        fields          = analyse_rmse

    [ensemble]

        Ns              = 9

    [initialisation]

        mean            = from truth
        variance        = 1.0
        seed            = None

    [integration]

        class           = BasicStochastic
        step            = from truth
        dt              = from truth
        variance        = 1.0
        seed            = None

    [observation-operator]

        class           = from truth
        variance        = from truth
        seed            = None

    [resampling]

        class           = StochasticUniversal
        threshold       = 0.5
        seed            = None

